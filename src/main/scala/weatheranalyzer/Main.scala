package weatheranalyzer

import weatheranalyzer.model._
import weatheranalyzer.utils.FileLoader
import weatheranalyzer.processing._
import weatheranalyzer.reporting._
import weatheranalyzer.ml.{TemperaturePredictor, PredictionExporter, LinearRegressor}

object Main {
  def main(args: Array[String]): Unit = {
    println("=== Weather Analyzer ===")

    // Chargement des donn√©es
    val stations = FileLoader.loadStations("data/raw/station_data.csv")
    val observations = FileLoader.loadObservations("data/raw/weather_observations.csv")

    // Nettoyage
    val cleanedData = Cleaning.clean(observations)
    println(s"üî¢ Nombre d'observations brutes : ${observations.size}")
    println(s"‚úÖ Nombre d'observations nettoy√©es : ${cleanedData.size}")

    // Alertes visuelles (console)
    Visualizer.showTemperatureAlerts(cleanedData)

    // Agr√©gation
    val avgPerDay = Aggregation.averageTemperaturePerDay(cleanedData)
    Visualizer.exportAverages("data/generated/average_temperature.csv", avgPerDay)
    println("üìÑ Fichier CSV export√© : data/generated/average_temperature.csv")

    // Pr√©dictions chaud/froid
    val classified = TemperaturePredictor.classifyAll(cleanedData)
    PredictionExporter.exportToCSV(classified, "data/generated/predictions.csv")
    println("üìÑ Pr√©dictions export√©es : data/generated/predictions.csv")

    // R√©gression lin√©aire simple
    val preds = LinearRegressor.predictAll(cleanedData)
    println("Exemples de pr√©dictions lin√©aires :")
    preds.take(5).foreach(println)
  }
}
